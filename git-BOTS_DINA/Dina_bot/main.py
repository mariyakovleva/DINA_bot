# #!/usr/bin/python
# ## -*- coding: utf-8 -*-
import telebot
import config 
import buttons
import os 
import requests
import threading


administrators = (842234154, ) 
users = {}
users_text = {}
users_text_2 = {}
my_poll = {} 

poll_1 = {} 
poll_2 = {} 
poll_3 = {} 
poll_4 = {} 
poll_5 = {} 
poll_6 = {} 
poll_7 = {} 
poll_8 = {} 
poll_9 = {} 
poll_10 = {} 
poll_11 = {} 
poll_12 = {} 
poll_13 = {} 
poll_14 = {} 
poll_15 = {} 

bot = telebot.TeleBot(config.TOKEN, threaded = True)

@bot.message_handler(commands = ['start'])
def start_msg(message):
    bot.send_message(message.chat.id, 
        f'''
        –í—ã–±–µ—Ä–∏, –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å? üëá
    ''', parse_mode = "Markdown", reply_markup = buttons.Main_menu())


@bot.message_handler(func=lambda message: message.text == '–û—Ü–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ üè¢')
def review_SP(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', reply_markup = buttons.review_SP())



@bot.message_handler(func=lambda message: message.text == '–û—Ü–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üôé‚Äç‚ôÇÔ∏è')
def input_emploee(message):        
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å:')
    users[message.chat.id] = {}
    bot.register_next_step_handler(message, save_msg_text)
 
def save_msg_text(message):
    users[message.chat.id]['emploee'] = message.text
    bot.send_message(message.chat.id, f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?', reply_markup = buttons.Save_Change())

def send_feedback_administrators(message):
    feedback = message.text
    user = users[message.chat.id]
    emploee = user['emploee']
    for admin_chat_id in administrators:
        bot.send_message(admin_chat_id, f'''–û—Ü–µ–Ω–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {emploee}.
                         \n–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ "{user['review_Text']}" —Å –æ—Ç–∑—ã–≤–æ–º: "{feedback}"''')
    bot.send_message(message.chat.id, '–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ *—Å–æ—Ö—Ä–∞–Ω—ë–Ω*!', parse_mode = "Markdown") 


# @bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üìä')
# def pool_X(message):
#     bot.send_message(message.chat.id, '*–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å:*\n\t1. –ö–ª–∏–∫–Ω–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.'\
#             '\n\t2. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å".\n\t3. –ü–µ—Ä–µ–≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.', parse_mode = "Markdown")
#     if my_poll == {}:
#         pool_X = bot.send_poll(message.chat.id, 
#             question = f'–û–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –ª–∏ –í—ã –∫ –∫–ª—é—á–µ–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–≤–∞–Ω–∏–∏ üìû–¢–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¢–ù–≠?',
#             options = ['–î–∞', '–ù–µ—Ç'], is_anonymous = 0, allows_multiple_answers = 0)
#         my_poll['ls'] = [message.chat.id, pool_X.message_id] 
#         # print(my_poll) 
#     else: 
#         bot.forward_message(message.chat.id, my_poll['ls'][0], my_poll['ls'][1])

# @bot.message_handler(func=lambda message: message.text == '–í—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ üôã')
# def say_mind(message):
#     bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π üåü'
#         '–ú—ã —Ü–µ–Ω–∏–º –ª—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.üí•'
#         '–ß—Ç–æ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è? –ß—Ç–æ —Å—Ç–æ–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? –ú—ã —Ö–æ—Ç–∏–º –∑–Ω–∞—Ç—å –≤—Å–µ –í–∞—à–∏ –º—ã—Å–ª–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èü§î:')
#     users_text[message.chat.id] = {}
#     bot.register_next_step_handler(message, send_feedback_administrators_1)

# def send_feedback_administrators_1(message):
#     users_text[message.chat.id]['usertext'] = message.text
#     for admin_chat_id in administrators:
#         bot.send_message(admin_chat_id, f'{users_text}')
#     bot.send_message(message.chat.id, f'–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ! üöÄ') #reply_markup = ls_keyboards()

# @bot.message_handler(func=lambda message: message.text == '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ üìà')
# def add_offer(message):
#     bot.send_message(message.chat.id, 
#         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞üìà'
#         '/n–ú—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±—ã–µ –∏–¥–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:')
#     users_text[message.chat.id]= {}
#     bot.register_next_step_handler(message, send_feedback_administrators_1)

# def send_feedback_administrators_2(message):
#     users_text_1[message.chat.id]['usertext'] = message.text
#     for admin_chat_id in administrators:
#         bot.send_message(admin_chat_id, f'{users_text_1}')
#     bot.send_message(message.chat.id, 
#         f'–í–∞—à –≤–∫–ª–∞–¥ –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üöÄ')

# @bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã üìë')
# def sent_develop(message):
#     ls_img = {'1': '–†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ—Ü–µ–Ω—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø–æ–¥–∑—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –æ–±—â–µ—Å—Ç–≤–∞', 
#               '2': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–µ–∑–µ –º–µ—Å—è—Ü–µ–≤'}
#     for key, value in ls_img.items():
#         with open((os.path.abspath(f'images/{key}.jpg')), 'rb') as file:
#             bot.send_photo(message.chat.id, file.read(), caption = f'{value}')

# @bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ‚ùì')
# def sent_develop(message):
#     bot.send_message(message.chat.id, 
#         '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –∏–¥–µ–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã‚úÖ'
#         '\n–í—Å–µ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ —É–¥–æ–±–Ω–µ–µüöÄ'
#         '\n–ö–æ–Ω—Ç–∞–∫—Ç: @Mari_YakovlevM ')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func = lambda msg: True)
def callback_Func(call):
    message = call.message
    text = call.data

    # ------------------------- —Ä–∞–∑–¥–µ–ª "–û—Ü–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ" ----------------------------
    def pool_review_SP(arg_text, arg_poll_result):
        if arg_poll_result == {}:
            my_poll = bot.send_poll(message.chat.id, 
                question = f'–û—Ü–µ–Ω–∏ {arg_text},–æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ñ—Ä–æ–π',
                options = ['–û—Ç–ª–∏—á–Ω–æ üòá', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ üòë', '–ü–ª–æ—Ö–æ üò°'], is_anonymous = 1, allows_multiple_answers = 0)
            arg_poll_result['ls'] = [message.chat.id, my_poll.message_id] # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
            # print(my_poll)
            # print(arg_poll_result)

            #–¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
            def send_feedback_administrators_1(message):
                users_text[message.chat.id]['usertext'] = message.text
                for admin_chat_id in administrators:
                    bot.send_message(admin_chat_id, f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é {arg_text}: {message.text}')
                bot.send_message(message.chat.id, f'–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤–∞–∂–Ω—ã –¥–ª—è –Ω–∞—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ! üöÄ')

            bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–∏–∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é –æ—Ü–µ–Ω–∫—Éü§î:')
            users_text[message.chat.id] = {}
            bot.register_next_step_handler(message, send_feedback_administrators_1)
        else: 
            bot.forward_message(message.chat.id, arg_poll_result['ls'][0], arg_poll_result['ls'][1])

    if '–ü–≠–û' in text:
        pool_review_SP(text, poll_1)
   
    if '–°–ò–ë' in text:
        pool_review_SP(text, poll_2)

    if '–û–ò' in text: 
        pool_review_SP(text, poll_3)

    if '–û–°–î –†–†–≠' in text:
        pool_review_SP(text, poll_4)
   
    if '–°–ü–£–§' in text: 
        pool_review_SP(text, poll_5)

    if '–û–ë' in text: 
        pool_review_SP(text, poll_6)

    if '–û–£–ü' in text: 
        pool_review_SP(text, poll_7)

    if '–û–°–î –û–†–≠' in text: 
        pool_review_SP(text, poll_8)
       
    if '–°–û–ü–¢' in text: 
        pool_review_SP(text, poll_9)

    if '–û–î' in text: 
        pool_review_SP(text, poll_10)

    if '–û–ê–ó–ò' in text: 
        pool_review_SP(text, poll_11)

    if '–°–ö–û–í' in text: 
        pool_review_SP(text, poll_12)
       
    if '–û–û–ü–î' in text: 
        pool_review_SP(text, poll_13)

    if '–°–≠–ú' in text: 
        print(text)
        pool_review_SP(text, poll_14)

    if '–°–ü–ü–ë–û–¢' in text: 
        pool_review_SP(text, poll_15)

    # ------------------------- —Ä–∞–∑–¥–µ–ª "–û—Ü–µ–Ω–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" ----------------------------
    if 'save_data' in call.data:
        message_id = call.message.message_id
        bot.answer_callback_query(call.id, text = "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        bot.delete_message(chat_id = call.message.chat.id, message_id = message_id)
        bot.send_message(call.message.chat.id, 
            f'–ö–∞–∫ –í—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {users[call.message.chat.id]['emploee']}?', 
            parse_mode = "Markdown", reply_markup = buttons.review_Text())
        
    if 'change_data' in call.data:
        input_emploee(call.message)
    
    # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if '–û—Ç–ª–∏—á–Ω–æ' in call.data or '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' in call.data or '–ü–ª–æ—Ö–æ' in call.data:
        print(f'–í–∞—à —Ç–µ–∫—Å—Ç {call.data}')
        bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
        users[call.message.chat.id]['review_Text'] = call.data
        print(users)
        bot.send_message(call.message.chat.id, 
            '–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –µ–≥–æ —Ä–∞–±–æ—Ç–µ, –∏ —á—Ç–æ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:')
        bot.register_next_step_handler(call.message, send_feedback_administrators)




# ------------------------------------------------------------------------------------
if __name__ == '__main__':
    def runBot():
        bot.polling(none_stop = True, interval = 0, timeout = 100)

    t1 = threading.Thread(target = runBot)
    t1.start()

